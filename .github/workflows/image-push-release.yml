name: "Push images on release"
on:
  push:
    tags:
      - v*
jobs:
  build-and-push-amd64-device-plugin:
    if: github.repository_owner == 'k8snetworkplumbingwg'
    name: Image push AMD64
    runs-on: ubuntu-20.04
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tag-latest: false

      - name: Build and push sriov-network-device-plugin
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.docker_meta.outputs.tags }}-amd64
          file: images/Dockerfile

  build-and-push-arm64-device-plugin:
    if: github.repository_owner == 'k8snetworkplumbingwg'
    name: Image push ARM64
    runs-on: ubuntu-20.04
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tag-latest: false

      - name: Build and push sriov-network-device-plugin
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            ${{ steps.docker_meta.outputs.tags }}-arm64
          file: images/Dockerfile.arm64

  build-and-push-ppc64le-device-plugin:
    if: github.repository_owner == 'k8snetworkplumbingwg'
    name: Image push ppc64le
    runs-on: ubuntu-20.04
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tag-latest: false

      - name: Build and push sriov-network-device-plugin
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/ppc64le
          push: true
          tags: |
            ${{ steps.docker_meta.outputs.tags }}-ppc64le
          file: images/Dockerfile.ppc64le

  push-manifest:
    runs-on: ubuntu-20.04
    needs: [build-and-push-amd64-device-plugin,build-and-push-arm64-device-plugin,build-and-push-ppc64le-device-plugin]
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Docker meta
      id: docker_meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.IMAGE_NAME }}
        tag-latest: false

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create manifest for multi-arch images
      run: |
        # pull
        docker pull ${{ steps.docker_meta.outputs.tags }}-amd64
        docker pull ${{ steps.docker_meta.outputs.tags }}-arm64
        docker pull ${{ steps.docker_meta.outputs.tags }}-ppc64le
        # create
        docker manifest create ${{ steps.docker_meta.outputs.tags }} ${{ steps.docker_meta.outputs.tags }}-amd64 ${{ steps.docker_meta.outputs.tags }}-arm64 ${{ steps.docker_meta.outputs.tags }}-ppc64le
        # annotate
        docker manifest annotate ${{ steps.docker_meta.outputs.tags }} ${{ steps.docker_meta.outputs.tags }}-amd64 --arch amd64
        docker manifest annotate ${{ steps.docker_meta.outputs.tags }} ${{ steps.docker_meta.outputs.tags }}-arm64 --arch arm64
        docker manifest annotate ${{ steps.docker_meta.outputs.tags }} ${{ steps.docker_meta.outputs.tags }}-ppc64le --arch ppc64le
        # push
        docker manifest push ${{ steps.docker_meta.outputs.tags }}
